package com.example.user.greendaolibrary.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.user.greendaolibrary.entity.LockMark;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCK_MARK".
*/
public class LockMarkDao extends AbstractDao<LockMark, Long> {

    public static final String TABLENAME = "LOCK_MARK";

    /**
     * Properties of entity LockMark.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LockID = new Property(1, String.class, "lockID", false, "LOCK_ID");
        public final static Property LockName = new Property(2, String.class, "lockName", false, "LOCK_NAME");
    };


    public LockMarkDao(DaoConfig config) {
        super(config);
    }
    
    public LockMarkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCK_MARK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOCK_ID\" TEXT," + // 1: lockID
                "\"LOCK_NAME\" TEXT);"); // 2: lockName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCK_MARK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LockMark entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lockID = entity.getLockID();
        if (lockID != null) {
            stmt.bindString(2, lockID);
        }
 
        String lockName = entity.getLockName();
        if (lockName != null) {
            stmt.bindString(3, lockName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LockMark readEntity(Cursor cursor, int offset) {
        LockMark entity = new LockMark( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lockID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // lockName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LockMark entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLockID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLockName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LockMark entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LockMark entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    //--------------------------自定义数据库操作方法
    //查询所有数据
    public List<LockMark> queryAllLock(){
        List<LockMark> list = new ArrayList<LockMark>();
        QueryBuilder<LockMark> queryBuilder = queryBuilder();
        return queryBuilder.list();
    }

    public LockMark queryLockById(String  id){
        List<LockMark> list = new ArrayList<LockMark>();
        QueryBuilder<LockMark> queryBuilder = queryBuilder();
        return queryBuilder.where(Properties.Id.eq(id)).unique();
    }
    
}
